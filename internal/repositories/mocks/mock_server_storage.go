// Code generated by MockGen. DO NOT EDIT.
// Source: gophkeeper/internal/server/storage (interfaces: IEncryptedServerStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	data "gophkeeper/internal/repositories/data"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEncryptedServerStorage is a mock of IEncryptedServerStorage interface.
type MockIEncryptedServerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIEncryptedServerStorageMockRecorder
}

// MockIEncryptedServerStorageMockRecorder is the mock recorder for MockIEncryptedServerStorage.
type MockIEncryptedServerStorageMockRecorder struct {
	mock *MockIEncryptedServerStorage
}

// NewMockIEncryptedServerStorage creates a new mock instance.
func NewMockIEncryptedServerStorage(ctrl *gomock.Controller) *MockIEncryptedServerStorage {
	mock := &MockIEncryptedServerStorage{ctrl: ctrl}
	mock.recorder = &MockIEncryptedServerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEncryptedServerStorage) EXPECT() *MockIEncryptedServerStorageMockRecorder {
	return m.recorder
}

// AddEncryptedData mocks base method.
func (m *MockIEncryptedServerStorage) AddEncryptedData(arg0 context.Context, arg1 string, arg2 data.EncryptedData, arg3 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEncryptedData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEncryptedData indicates an expected call of AddEncryptedData.
func (mr *MockIEncryptedServerStorageMockRecorder) AddEncryptedData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEncryptedData", reflect.TypeOf((*MockIEncryptedServerStorage)(nil).AddEncryptedData), arg0, arg1, arg2, arg3)
}

// AppendEncryptedData mocks base method.
func (m *MockIEncryptedServerStorage) AppendEncryptedData(arg0 context.Context, arg1 string, arg2 data.EncryptedData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEncryptedData", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEncryptedData indicates an expected call of AppendEncryptedData.
func (mr *MockIEncryptedServerStorageMockRecorder) AppendEncryptedData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEncryptedData", reflect.TypeOf((*MockIEncryptedServerStorage)(nil).AppendEncryptedData), arg0, arg1, arg2)
}

// DeleteEncryptedData mocks base method.
func (m *MockIEncryptedServerStorage) DeleteEncryptedData(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEncryptedData", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEncryptedData indicates an expected call of DeleteEncryptedData.
func (mr *MockIEncryptedServerStorageMockRecorder) DeleteEncryptedData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEncryptedData", reflect.TypeOf((*MockIEncryptedServerStorage)(nil).DeleteEncryptedData), arg0, arg1, arg2)
}

// GetAllEncryptedData mocks base method.
func (m *MockIEncryptedServerStorage) GetAllEncryptedData(arg0 context.Context, arg1 string) ([][]data.EncryptedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEncryptedData", arg0, arg1)
	ret0, _ := ret[0].([][]data.EncryptedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEncryptedData indicates an expected call of GetAllEncryptedData.
func (mr *MockIEncryptedServerStorageMockRecorder) GetAllEncryptedData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEncryptedData", reflect.TypeOf((*MockIEncryptedServerStorage)(nil).GetAllEncryptedData), arg0, arg1)
}

// ReplaceEncryptedData mocks base method.
func (m *MockIEncryptedServerStorage) ReplaceEncryptedData(arg0 context.Context, arg1 string, arg2 data.EncryptedData, arg3 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceEncryptedData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceEncryptedData indicates an expected call of ReplaceEncryptedData.
func (mr *MockIEncryptedServerStorageMockRecorder) ReplaceEncryptedData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceEncryptedData", reflect.TypeOf((*MockIEncryptedServerStorage)(nil).ReplaceEncryptedData), arg0, arg1, arg2, arg3)
}
