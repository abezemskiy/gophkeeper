services:
  gophkeeper-server-postgres:
    container_name: gophkeeper-server-postgres
    image: postgres:17.2
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SERVER_DB_USER} -d ${SERVER_DB_NAME}" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s
    environment:
      POSTGRES_USER: ${SERVER_DB_USER}
      POSTGRES_PASSWORD: ${SERVER_DB_PASSWORD}
      POSTGRES_DB: ${SERVER_DB_NAME}
      PGDATA: "/var/lib/postgresql/data"
    volumes:
      - ./db/server/init:/docker-entrypoint-initdb.d
      - gophkeeper-server-postgres:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - gophkeeper
    restart: always

  gophkeeper-client-postgres:
    container_name: gophkeeper-client-postgres
    image: postgres:17.2
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${CLIENT_DB_USER} -d ${CLIENT_DB_NAME}" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_USER: ${CLIENT_DB_USER}
      POSTGRES_PASSWORD: ${CLIENT_DB_PASSWORD}
      POSTGRES_DB: ${CLIENT_DB_NAME}
      PGDATA: "/var/lib/postgresql/data"
    volumes:
      - ./db/client/init:/docker-entrypoint-initdb.d
      - gophkeeper-client-postgres:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - gophkeeper
    restart: always

  gophkeeper-server-app:
    container_name: gophkeeper-server-app
    build:
      context: .
      dockerfile: build/server/Dockerfile.server
    depends_on:
      gophkeeper-server-postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      GOPHKEEPER_SERVER_DATABASE_URL: ${SERVER_DSN}
      GOPHKEEPER_SERVER_ADDRESS: :8080
      GOPHKEEPER_SERVER_LOG_LEVEL: info
      GOPHKEEPER_SERVER_SECRET_KEY: ${SERVER_SECRET_KEY}
      GOPHKEEPER_SERVER_EXPIRE_TOKEN: 24
    networks:
      - gophkeeper
    restart: always

  gophkeeper-client-app:
    container_name: gophkeeper-client-app
    build:
      context: .
      dockerfile: build/client/Dockerfile.client
    depends_on:
      gophkeeper-client-postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      GOPHKEEPER_CLIENT_DATABASE_URL: ${CLIENT_DSN}
      GOPHKEEPER_CLIENT_ADDRESS: http://gophkeeper-server-app:8080
      GOPHKEEPER_CLIENT_LOG_LEVEL: info
    networks:
      - gophkeeper
    command: [ "sleep", "infinity" ]
    restart: always

volumes:
  gophkeeper-server-postgres:
  gophkeeper-client-postgres:


networks:
  gophkeeper:
    driver: bridge
